        -:    0:Source:Password.cpp
        -:    0:Graph:Password.gcno
        -:    0:Data:Password.gcda
        -:    0:Runs:2
        -:    1:#include "Password.h"
        -:    2:#include <string>
        -:    3:#include <cctype>
        -:    4:#include <vector>
        -:    5:#include <iostream>
        -:    6:#include <vector>
        -:    7:#include <algorithm>
        -:    8:
        -:    9:using std::string;
        -:   10:using std::vector;
        -:   11:using namespace std;
        -:   12:
        -:   13:/*
        -:   14:  The function receives a string counts how many times the same character 
        -:   15:  occurs at the beginning of the string, before any other characters (or the
        -:   16:  end of the string). The function is case-sensitive so 'Z' is different than
        -:   17:  'z' and any ASCII characters are allowed.
        -:   18:*/
function _ZN8PasswordC2Ev called 20 returned 100% blocks executed 53%
       20:   19:Password::Password(){
call    0 returned 20
       20:   20:  pass_history.push_back("ChicoCA-95929");
call    0 returned 20
call    1 returned 20
branch  2 taken 20 (fallthrough)
branch  3 taken 0 (throw)
call    4 returned 20
branch  5 taken 20 (fallthrough)
branch  6 taken 0 (throw)
call    7 returned 20
call    8 returned 20
call    9 never executed
call   10 never executed
       20:   21:}
call    0 never executed
        -:   22:
function _ZN8Password24count_leading_charactersENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 6 returned 100% blocks executed 100%
        6:   23:int Password::count_leading_characters(string phrase){
        6:   24:  int repetition = 1;
        6:   25:  int index = 0;
        6:   26:  if(phrase.length()==0){
call    0 returned 6
branch  1 taken 2 (fallthrough)
branch  2 taken 4
        2:   27:    return 0;
        -:   28:  }
        6:   29:  while( index < phrase.length()-1 && phrase[index] == phrase[index+1] ){
call    0 returned 6
branch  1 taken 2 (fallthrough)
branch  2 taken 4
call    3 returned 2
call    4 returned 2
branch  5 taken 2 (fallthrough)
branch  6 taken 0
branch  7 taken 2
branch  8 taken 4 (fallthrough)
        2:   30:    repetition++;
        2:   31:    index++;
        -:   32:  }
        4:   33:  return repetition;
        -:   34:}
        -:   35:// bool Password::has_mixed_case(string phrase){
        -:   36://   bool is_upperCase = false;
        -:   37://   bool is_lowerCase = false;
        -:   38://   for (char ch : phrase) {
        -:   39://       if(islower(ch)){
        -:   40://         is_lowerCase = true;
        -:   41://       }
        -:   42://       if(isupper(ch)){
        -:   43://         is_upperCase = true;
        -:   44://       }
        -:   45://   }
        -:   46://   if(is_lowerCase && is_upperCase){
        -:   47://     return true;
        -:   48://   }
        -:   49://   else{
        -:   50://     return false;
        -:   51://   }
        -:   52:// }
        -:   53:
        -:   54:// Implementation A
        -:   55:
        -:   56:// bool Password::has_mixed_case(string str)
        -:   57:// {
        -:   58://   bool has_lower = false;
        -:   59://   bool has_upper = false;
        -:   60://   for (char ch : str)
        -:   61://   {
        -:   62://     if (std::islower(ch))
        -:   63://     {
        -:   64://       has_lower = true;
        -:   65://     }
        -:   66://     else if (std::isupper(ch))
        -:   67://     {
        -:   68://       has_upper = true;
        -:   69://     }
        -:   70://   }
        -:   71://   return has_lower && has_upper;
        -:   72:// }
        -:   73:// Implementation B
        -:   74:// bool Password::has_mixed_case(string str)
        -:   75:// {
        -:   76://   int count_lower = 0;
        -:   77://   for (int i = 0; i < str.length(); i++)
        -:   78://   {
        -:   79://     if (str[i] >= 'a' && str[i] <= 'z')
        -:   80://     {
        -:   81://       count_lower++;
        -:   82://     }
        -:   83://   }
        -:   84://   return count_lower > 0 && count_lower < str.length();
        -:   85:// }
        -:   86:// Implementation C
        -:   87:// bool Password::has_mixed_case(string str)
        -:   88:// {
        -:   89://   bool lower = false;
        -:   90://   bool upper = false;
        -:   91://   for (int i = 0; i < str.length(); i++)
        -:   92://   {
        -:   93://     if (str[i] >= 'a' && str[i] <= 'z')
        -:   94://     {
        -:   95://       lower = true;
        -:   96://     }
        -:   97://     else if (str[i] >= 'A' && str[i] <= 'Z')
        -:   98://     {
        -:   99://       upper = true;
        -:  100://     }
        -:  101://   }
        -:  102://   return upper && lower;
        -:  103:// }
        -:  104:// Implementation D
        -:  105:// #include <cctype>
        -:  106:// bool Password::has_mixed_case(string str)
        -:  107:// {
        -:  108://   bool is_lower = false;
        -:  109://   bool is_upper = false;
        -:  110://   for (char c : str)
        -:  111://   {
        -:  112://     if (std::islower(c))
        -:  113://     {
        -:  114://       is_lower = true;
        -:  115://     }
        -:  116://     else
        -:  117://     {
        -:  118://       is_upper = true;
        -:  119://     }
        -:  120://   }
        -:  121://   return is_lower && is_upper;
        -:  122:// }
        -:  123:// Implementation E
function _ZN8Password14has_mixed_caseENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 10 returned 100% blocks executed 100%
       10:  124:bool Password::has_mixed_case(string str)
        -:  125:{
       10:  126:  bool found = false;
       46:  127:  for(char c : str){
call    0 returned 10
call    1 returned 10
call    2 returned 40
call    3 returned 36
call    4 returned 46
branch  5 taken 40
branch  6 taken 6 (fallthrough)
       40:  128:    if( !found && c >= 'A' && c <= 'Z' ){
branch  0 taken 36 (fallthrough)
branch  1 taken 4
branch  2 taken 36 (fallthrough)
branch  3 taken 0
branch  4 taken 6 (fallthrough)
branch  5 taken 30
        6:  129:      found = true;
        -:  130:    }
       34:  131:    else if( found && c >= 'a' && c <= 'z'){
branch  0 taken 4 (fallthrough)
branch  1 taken 30
branch  2 taken 4 (fallthrough)
branch  3 taken 0
branch  4 taken 4 (fallthrough)
branch  5 taken 0
        4:  132:      return true;
        -:  133:    }
        -:  134:  }
        6:  135:  return false;
        -:  136:}
function _ZN8Password3setENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 2 returned 100% blocks executed 88%
        2:  137:void Password::set(string new_pass){
        -:  138:    // Check if the new password meets all criteria
        4:  139:  if (new_pass.length() >= 8 && new_pass.length() <= 20 &&
call    0 returned 2
call    1 returned 2
branch  2 taken 2 (fallthrough)
branch  3 taken 0
        2:  140:      count(new_pass.begin(), new_pass.end(), new_pass[0]) <= 3 &&
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0 (throw)
call    3 returned 2
call    4 returned 2
call    5 returned 2
branch  6 taken 2 (fallthrough)
branch  7 taken 0 (throw)
branch  8 taken 2 (fallthrough)
branch  9 taken 0
        2:  141:      any_of(new_pass.begin(), new_pass.end(), ::isupper) &&
call    0 returned 2
call    1 returned 2
call    2 returned 2
branch  3 taken 2 (fallthrough)
branch  4 taken 0 (throw)
branch  5 taken 2 (fallthrough)
branch  6 taken 0
       6*:  142:      any_of(new_pass.begin(), new_pass.end(), ::islower) &&
branch  0 taken 2 (fallthrough)
branch  1 taken 0
call    2 returned 2
call    3 returned 2
call    4 returned 2
branch  5 taken 2 (fallthrough)
branch  6 taken 0 (throw)
branch  7 taken 2 (fallthrough)
branch  8 taken 0
branch  9 taken 2 (fallthrough)
branch 10 taken 0
        4:  143:      find(pass_history.begin(), pass_history.end(), new_pass) == pass_history.end()) {
call    0 returned 2
call    1 returned 2
call    2 returned 2
call    3 returned 2
branch  4 taken 2 (fallthrough)
branch  5 taken 0 (throw)
call    6 returned 2
branch  7 taken 2 (fallthrough)
branch  8 taken 0
        2:  144:      pass_history.push_back(new_pass);
call    0 returned 2
        2:  145:      cout << "Password successfully updated." << endl;
call    0 returned 2
call    1 returned 2
        -:  146:  } else {
    #####:  147:      cout << "Password does not meet the criteria or is a previous password." << endl;
call    0 never executed
call    1 never executed
        -:  148:  }
        -:  149:
        2:  150:}
function _ZN8Password12authenticateENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 4 returned 100% blocks executed 76%
        4:  151:bool Password::authenticate(string input_pass){
        -:  152:    // Check if a password has been set
        4:  153:  if (pass_history.empty()) {
call    0 returned 4
branch  1 taken 0 (fallthrough)
branch  2 taken 4
    #####:  154:      cout << "No password has been set yet." << endl;
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####:  155:      return false;
        -:  156:  }
        -:  157:
        -:  158:  // Check if the input password matches the latest password in history
        4:  159:  string latest_pass = pass_history.back();
call    0 returned 4
call    1 returned 4
branch  2 taken 4 (fallthrough)
branch  3 taken 0 (throw)
        4:  160:  if (input_pass == latest_pass) {
call    0 returned 4
branch  1 taken 2 (fallthrough)
branch  2 taken 2
        2:  161:      cout << "Authentication successful." << endl;
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0 (throw)
call    3 returned 2
branch  4 taken 2 (fallthrough)
branch  5 taken 0 (throw)
        2:  162:      return true;
        -:  163:  } else {
        2:  164:      cout << "Authentication failed: Incorrect password." << endl;
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0 (throw)
call    3 returned 2
branch  4 taken 2 (fallthrough)
branch  5 taken 0 (throw)
        2:  165:      return false;
        -:  166:  }
        4:  167:}
call    0 returned 4
call    1 never executed
